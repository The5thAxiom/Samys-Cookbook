';\n\nexport default function CheckRecipe() {\n    const [recipe, setRecipe] = useState<recipeFull>(null as any);\n    const [isLast, setIsLast] = useState<boolean>(false);\n    const params = useParams();\n\n    useEffect(() => {\n        setRecipe(null as any);\n        fetch(`/api/recipes/${params.id}/full`)\n            .then(r => r.json())\n            .then((r: recipeFull) => setRecipe(r));\n        fetch('/api/recipes/count')\n            .then(res => res.json())\n            .then(data => setIsLast(data.count === Number(params.id)));\n    }, [params.id]);\n\n    if (recipe)\n        return (\n            <main id='content'>\n                <article id='recipe'>\n                    <h1 id='recipe-name'>{recipe.name}</h1>\n                    <div id='recipe-byline'>\n                        by{' '}\n                        <NavLink to={`/user/@${recipe.contributor_username}`}>\n                            @{recipe.contributor_username}\n                        </NavLink>\n                    </div>\n                    <NextPreviousArrows\n                        id={Number(params.id)}\n                        isLast={isLast}\n                        top={true}\n                    />\n                    <section id='about'>\n                        <br />\n                        <b>{recipe.vegetarian ? 'veg' : 'non-veg'}</b> {' | '}\n                        <b>{`takes ${recipe.prep_time} minutes`}</b> {' | '}\n                        <b>{`makes ${recipe.quantity} ${recipe.unit}`}</b>{' '}\n                        {' | '}\n                        <b>{`difficulty: ${'★'.repeat(recipe.difficulty)}`}</b>\n                        <br />\n                        <br />\n                        <em>{recipe.description}</em>\n                        <br />\n                        <br />\n                        {recipe.recipe_tags && (\n                            <RecipeTags tags={recipe.recipe_tags} />\n                        )}\n                    </section>\n                    <hr />\n                    <section id='ingredients'>\n                        <h2>Ingredients</h2>\n                        <ol>\n                            {recipe.recipe_ingredients.map(\n                                (ing: recipeIngredient, index: number) => (\n                                    <li\n                                        key={index}\n                                        className='recipe-ingredient'\n                                    >\n                                        {ing.quantity} {ing.unit} of{' '}\n                                        {ing.english_name} (\n                                        {ing.hindi_name_devnagari} |{' '}\n                                        {ing.hindi_name_latin})\n                                    </li>\n                                )\n                            )}\n                        </ol>\n                    </section>\n                    <hr />\n                    <section id='steps'>\n                        <h2>Steps</h2>\n                        <ol>\n                            {recipe.recipe_steps.map(\n                                (step: string, index: number) => (\n                                    <li key={index} className='recipe-step'>\n                                        {step}\n                                    </li>\n                                )\n                            )}\n                        </ol>\n                    </section>\n                    <NextPreviousArrows\n                        id={Number(params.id)}\n                        isLast={isLast}\n                        top={false}\n                    />\n                </article>\n            </main>\n        );\n    else return <LoadingAnimation />;\n}\n\n","import React from 'react';\n\nexport default function NewRecipe() {\n    return (\n        <main>\n            <h1>Add New Recipe</h1>\n            <form>\n                <label htmlFor=\"name\">Recipe Name</label>\n                {\" \"}\n                <input\n                    type='text'\n                    placeholder='Enter the name of the recipe'\n                    name=\"name\"\n                    required\n                />\n            </form>\n        </main>\n    )\n}","import React, { useEffect, useState } from 'react';\r\nimport { recipeMeta } from '../values/types';\r\nimport { NavLink } from 'react-router-dom';\r\nimport RecipeTags from './recipeTags';\r\nimport LoadingAnimation from './loadingAnimation';\r\n\r\nexport default function RecipeCard({ recipe }: { recipe: recipeMeta }) {\r\n    const [tags, setTags] = useState<string[]>(null as any);\r\n\r\n    useEffect(() => {\r\n        fetch(`/api/recipes/${recipe.id}/tags`)\r\n            .then(res => (res.ok ? res.json() : null))\r\n            .then(data => setTags(data.tags));\r\n    }, [recipe.id]);\r\n\r\n    return (\r\n        <div className='recipe-card' id={`${recipe.id}`}>\r\n            <div className='recipe-card-name'>\r\n                <NavLink to={`/recipes/${recipe.id}`}>{recipe.name}</NavLink>\r\n            </div>\r\n            <div className='recipe-card-byline'>\r\n                by{' '}\r\n                <NavLink to={`/user/@${recipe.contributor_username}`}>\r\n                    @{recipe.contributor_username}\r\n                </NavLink>\r\n            </div>\r\n            <div className='recipe-card-stats'>\r\n                <div>{recipe.vegetarian ? 'veg' : 'non-veg'}</div>\r\n                <div>{recipe.prep_time} min.</div>\r\n                <div>\r\n                    {recipe.quantity} {recipe.unit}\r\n                </div>\r\n                <div>{'★'.repeat(recipe.difficulty)}</div>\r\n            </div>\r\n            <div className='recipe-card-description'>{recipe.description}</div>\r\n            {tags ? <RecipeTags tags={tags} /> : <LoadingAnimation />}\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport { recipeMeta } from '../values/types';\r\nimport RecipeCard from './recipeCard';\r\nimport './recipeCards.css';\r\n\r\nexport default function RecipeCards({ recipes }: { recipes: recipeMeta[] }) {\r\n    return (\r\n        <div className='recipe-cards'>\r\n            {recipes.map((r: recipeMeta) => (\r\n                <RecipeCard key={r.id} recipe={r} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport LoadingAnimation from '../../components/loadingAnimation';\nimport RecipeCards from '../../components/recipeCards';\nimport { recipeMeta } from '../../values/types';\n\nexport default function BrowseRecipes() {\n    const [searchParams] = useSearchParams();\n    const [recipes, setRecipes] = useState<recipeMeta[]>(null as any);\n\n    useEffect(() => {\n        const user = searchParams.get('only-user');\n        const tag = searchParams.get('only-tag');\n        setRecipes(null as any);\n        if (user !== null)\n            fetch(`/api/users/${user}/recipes`)\n                .then(res => (res.ok ? res.json() : { recipes: [] }))\n                .then(data => setRecipes(data.recipes));\n        else if (tag !== null)\n            fetch(`/api/recipes/bytag/${tag}`)\n                .then(res => (res.ok ? res.json() : { recipes: [] }))\n                .then(data => setRecipes(data.recipes));\n        else\n            fetch('/api/recipes/all')\n                .then(res => (res.ok ? res.json() : { recipes: [] }))\n                .then(data => setRecipes(data.recipes))\n                .catch(e => setRecipes([]));\n    }, [searchParams]);\n\n    if (recipes === null)\n        return (\n            <main>\n                <LoadingAnimation />\n            </main>\n        );\n    else if (recipes.length === 0)\n        return (\n            <main>\n                <h1>Recipes</h1>\n                <b>No recipes found :(</b>\n            </main>\n        );\n    else\n        return (\n            <main>\n                <h1>Recipes</h1>\n                {<RecipeCards recipes={recipes} />}\n            </main>\n        );\n}\n\n","import React, { useEffect, useState } from 'react';\nimport { useParams, NavLink } from 'react-router-dom';\nimport LoadingAnimation from '../../components/loadingAnimation';\nimport { userData } from '../../values/types';\n\nexport default function User() {\n    const [user, setUser] = useState<userData>(null as any);\n    const params = useParams();\n\n    useEffect(() => {\n        setUser(null as any);\n        fetch(`/api/users/${params.username}`)\n            .then(res => res.json())\n            .then((data: userData) => setUser(data));\n    }, [params.username]);\n\n    if (user)\n        return (\n            <main>\n                <h1>@{user.username}</h1>\n                <b>{user.name}</b>\n                <p>{user.bio}</p>\n                <p>\n                    Checkout their recipes{' '}\n                    <NavLink end to={`/recipes?user=${user.username}`}>\n                        here\n                    </NavLink>\n                </p>\n            </main>\n        );\n    else\n        return (\n            <main>\n                <LoadingAnimation />\n            </main>\n        );\n}\n\n","import React, { useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport LoadingAnimation from '../../components/loadingAnimation';\nimport { userData } from '../../values/types';\n\nexport default function Profile({\n    accessToken,\n    setAccessToken,\n    removeAccessToken\n}: {\n    accessToken: string;\n    setAccessToken?: any;\n    removeAccessToken?: any;\n}) {\n    const [user, setUser] = useState<userData>(null as any);\n\n    useEffect(() => {\n        fetch('/api/users/profile', {\n            method: 'GET',\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        })\n            .then(res => {\n                if (res.ok) return res.json();\n                else {\n                    removeAccessToken();\n                    throw new Error();\n                }\n            })\n            .then(data => {\n                data.access_token && setAccessToken(data.access_token);\n                setUser(data);\n            })\n            .catch(e => {});\n    }, [accessToken, setAccessToken, removeAccessToken]);\n\n    if (user)\n        return (\n            <main>\n                <h1>@{user.username}</h1>\n                <b>{user.name}</b>\n                <p>{user.bio}</p>\n                <ul>\n                    <li>\n                        <NavLink end to='/recipes/new'>\n                            add recipe\n                        </NavLink>\n                    </li>\n                    <li>\n                        <NavLink end to={`/recipes?only-user=${user.username}`}>\n                            see your recipes\n                        </NavLink>\n                    </li>\n                    {/* <li><NavLink end to='/skills/new'>add skill</NavLink></li>\n                <li><NavLink end to='/skills'>see your skills</NavLink></li> */}\n                </ul>\n            </main>\n        );\n    else\n        return (\n            <main>\n                <LoadingAnimation />\n            </main>\n        );\n}\n\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","import React, { useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { userLoginData } from '../../values/types';\n\nexport default function Login({\n    accessToken,\n    setAccessToken\n}: {\n    accessToken: string;\n    setAccessToken: any;\n}) {\n    const [userData, setUserData] = useState<userLoginData>(null as any);\n\n    const submitForm = (e: React.FormEvent) => {\n        e.preventDefault();\n        async function fetchData() {\n            const res = await fetch('/api/users/login', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify(userData)\n            });\n            if (res.ok) {\n                let a = await res.json();\n                setAccessToken(a.access_token);\n            } else {\n                window.alert('wrong login attempt');\n            }\n        }\n        fetchData();\n    };\n    return (\n        <main>\n            <b>{accessToken && accessToken}</b>\n            <h1>Login</h1>\n            <form className='cookbook-form'>\n                <div>\n                    <label className='cookbook-form-label' htmlFor='username'>\n                        <b>Username</b>\n                    </label>\n                    {'  '}\n                    <input\n                        className='cookbook-form-labelled'\n                        type='text'\n                        placeholder='Enter your username'\n                        name='username'\n                        onChange={e => {\n                            setUserData({\n                                ...userData,\n                                username: e.target.value\n                            });\n                        }}\n                        required\n                    />\n                </div>\n                <div>\n                    <label className='cookbook-form-label' htmlFor='password'>\n                        <b>Password</b>\n                    </label>\n                    {'  '}\n                    <input\n                        className='cookbook-form-labelled'\n                        type='password'\n                        placeholder='Enter your password'\n                        name='password'\n                        onChange={e => {\n                            setUserData({\n                                ...userData,\n                                password: e.target.value\n                            });\n                        }}\n                        required\n                    />\n                </div>\n                <div>\n                    <button\n                        className='cookbook-form-button'\n                        onClick={submitForm}\n                    >\n                        Login\n                    </button>\n                    <NavLink end to='/user/new'>\n                        I'm a new user\n                    </NavLink>\n                </div>\n            </form>\n        </main>\n    );\n}\n\n","import React, { useState } from 'react';\nimport { Navigate } from 'react-router-dom';\n\nexport default function Signup() {\n    const [username, setUsername] = useState<string>(null as any);\n    const [password, setPassword] = useState<string>(null as any);\n    const [name, setName] = useState<string>(null as any);\n    const [bio, setBio] = useState<string>(null as any);\n\n    const [redirectToLogin, setRedirectToLogin] = useState<boolean>(false);\n\n    const submitForm = (e: React.FormEvent) => {\n        e.preventDefault();\n        console.log({\n            username: username,\n            password: password,\n            name: name,\n            bio: bio\n        });\n        async function sendData() {\n            fetch('/api/users', {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    username: username,\n                    password: password,\n                    name: name,\n                    bio: bio\n                })\n            }).then(res => {\n                if (res.ok) {\n                    setRedirectToLogin(true);\n                } else {\n                    window.alert('try changing your username');\n                }\n            });\n        }\n        sendData();\n    };\n    if (!redirectToLogin)\n        return (\n            <main>\n                <h1>Welcome to Samy's Cookbook!</h1>\n                <form className='cookbook-form'>\n                    <div>\n                        <label htmlFor='name'>\n                            <b>Name</b>\n                        </label>\n                        <input\n                            className='cookbook-form-labelled'\n                            type='text'\n                            placeholder='Enter your name'\n                            name='name'\n                            onChange={e => {\n                                setName(e.target.value);\n                            }}\n                            required\n                        />\n                    </div>\n                    <div>\n                        <label htmlFor='username'>\n                            <b>Username</b>\n                        </label>\n                        <input\n                            className='cookbook-form-labelled'\n                            type='text'\n                            placeholder='Enter your username'\n                            name='username'\n                            onChange={e => {\n                                setUsername(e.target.value);\n                            }}\n                            required\n                        />\n                    </div>\n                    <div>\n                        <label htmlFor='password'>\n                            <b>Password</b>\n                        </label>\n                        <input\n                            className='cookbook-form-labelled'\n                            type='password'\n                            placeholder='Enter your password'\n                            name='password'\n                            onChange={e => {\n                                setPassword(e.target.value);\n                            }}\n                            required\n                        />\n                    </div>\n                    <label htmlFor='bio'>\n                        <b>Bio</b>\n                    </label>\n                    <textarea\n                        className='cookbook-form-labelled'\n                        name='bio'\n                        rows={3}\n                        cols={25}\n                        placeholder='Write a little bit about yourself!'\n                        onChange={e => {\n                            setBio(e.target.value);\n                        }}\n                    />\n                    <button\n                        className='cookbook-form-button'\n                        onClick={submitForm}\n                    >\n                        Signup\n                    </button>\n                </form>\n            </main>\n        );\n    else return <Navigate to='/user' />;\n}\n\n","import React from 'react';\nimport { HashRouter, Routes, Route, Outlet } from 'react-router-dom';\n\nimport './index.css';\nimport './forms.css';\n\nimport Footer from './layout/footer';\nimport NavBar from './layout/navBar';\n\nimport Home from './pages/home';\n\nimport CheckRecipe from './pages/recipes/checkRecipe';\nimport NewRecipe from './pages/recipes/newRecipe';\nimport BrowseRecipes from './pages/recipes/browseRecipes';\n\n// import BrowseSkills from './pages/browsseSkills';\n// import CheckSkill from './pages/checkSkill';\n// import NewSkill from './pages/newSkill';\n\nimport User from './pages/users/user';\nimport Profile from './pages/users/profile';\nimport Login from './pages/users/login';\nimport Signup from './pages/users/signup';\n\nimport useAccessToken from './useAccessToken';\n\nexport default function App() {\n    const { accessToken, setAccessToken, removeAccessToken } = useAccessToken();\n    return (\n        <HashRouter basename=''>\n            <Routes>\n                <Route\n                    path='/'\n                    element={\n                        <>\n                            <NavBar\n                                accessToken={accessToken}\n                                removeAccessToken={removeAccessToken}\n                            />\n                            <Outlet />\n                            <Footer />\n                        </>\n                    }\n                >\n                    <Route index element={<Home />} />\n                    <Route path='home' element={<Home />} />\n                    <Route path='recipes' element={<Outlet />}>\n                        <Route index element={<BrowseRecipes />} />\n                        <Route path=':id' element={<CheckRecipe />} />\n                        <Route path='filter' element={<BrowseRecipes />} />\n                        <Route path='new' element={<NewRecipe />} />\n                    </Route>\n                    {/* <Route path='skills' element={<Outlet />}>\n                    <Route index element={<BrowseSkills />} />\n                    <Route path=':id' element={<CheckSkill />} />\n                    <Route path='filter' element={<FilterSkills />} />\n                    <Route path='new' element={<NewSkill />} />\n                </Route> */}\n                    <Route path='user' element={<Outlet />}>\n                        {/* if the doesn't exist, /user is the login page, if it does, /user is the profile page */}\n                        {accessToken !== '' ? (\n                            <Route\n                                index\n                                element={\n                                    <Profile\n                                        accessToken={accessToken}\n                                        setAccessToken={setAccessToken}\n                                        removeAccessToken={removeAccessToken}\n                                    />\n                                }\n                            />\n                        ) : (\n                            <>\n                                <Route\n                                    index\n                                    element={\n                                        <Login\n                                            accessToken={accessToken}\n                                            setAccessToken={setAccessToken}\n                                        />\n                                    }\n                                />\n                                <Route path='new' element={<Signup />} />\n                            </>\n                        )}\n                        <Route path='@:username' element={<User />} />\n                    </Route>\n                </Route>\n            </Routes>\n        </HashRouter>\n    );\n}\n\n","import { useState } from \"react\";\n\nexport default function useAccessToken() {\n\n  function getToken(){\n    const userToken = localStorage.getItem('access_token');\n    return userToken && userToken\n  }\n\n  const [token, setToken] = useState(getToken());\n\n  function saveToken(userToken: string) {\n    localStorage.setItem('access_token', userToken);\n    setToken(userToken);\n  };\n\n  function removeToken() {\n    localStorage.removeItem(\"access_token\");\n    setToken(null as any);\n  }\n\n  return {\n    accessToken: token === null ? \"\" : token,\n    setAccessToken: saveToken,\n    removeAccessToken: removeToken\n  }\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\n\n\nconst root = ReactDOM.createRoot(\n    document.getElementById('root') as HTMLElement\n);\n\n// strict mode will run [some](https://stackoverflow.com/questions/60305074/react-strictmode-setstate-function-in-useeffect-is-run-multiple-times-when-effe) stuff\n// twice!, for debugging (checking the idempotency of some stuff, idk)\n// that is why the recipes are fetched twice\nroot.render(\n    <App/>\n    //   <React.StrictMode>\n    //   </React.StrictMode>\n);\n"],"names":["module","exports","aa","require","ba","p","a","b","c","arguments","length","encodeURIComponent","ca","Set","da","ea","fa","add","ha","window","document","createElement","ia","Object","prototype","hasOwnProperty","ja","ka","la","q","d","e","f","g","this","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","propertyName","type","sanitizeURL","removeEmptyString","z","split","forEach","toLowerCase","pa","qa","toUpperCase","ra","slice","na","isNaN","oa","call","test","ma","removeAttribute","setAttribute","setAttributeNS","replace","xlinkHref","sa","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","ta","Symbol","for","ua","va","wa","xa","ya","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","iterator","Ia","Ja","A","assign","Ka","Error","stack","trim","match","La","Ma","prepareStackTrace","defineProperty","set","Reflect","construct","l","h","k","displayName","includes","name","Na","tag","render","Oa","$$typeof","_context","_payload","_init","Pa","Qa","Ra","nodeName","Ta","_valueTracker","getOwnPropertyDescriptor","constructor","get","configurable","enumerable","getValue","setValue","stopTracking","Sa","Ua","checked","value","Va","activeElement","body","Wa","defaultChecked","defaultValue","_wrapperState","initialChecked","Xa","initialValue","controlled","Ya","Za","$a","ab","ownerDocument","bb","Array","isArray","cb","options","selected","defaultSelected","disabled","db","dangerouslySetInnerHTML","children","eb","fb","gb","textContent","hb","ib","jb","kb","namespaceURI","innerHTML","valueOf","toString","firstChild","removeChild","appendChild","MSApp","execUnsafeLocalFunction","lb","lastChild","nodeType","nodeValue","mb","animationIterationCount","aspectRatio","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridArea","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","fontWeight","lineClamp","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","nb","ob","pb","style","indexOf","setProperty","keys","charAt","substring","qb","menuitem","area","base","br","col","embed","hr","img","input","keygen","link","meta","param","source","track","wbr","rb","sb","is","tb","ub","target","srcElement","correspondingUseElement","parentNode","vb","wb","xb","yb","zb","stateNode","Ab","Bb","push","Cb","Db","Eb","Fb","Gb","Hb","Ib","Jb","addEventListener","removeEventListener","Kb","apply","m","onError","Lb","Mb","Nb","Ob","Pb","Qb","Sb","alternate","return","flags","Tb","memoizedState","dehydrated","Ub","Wb","child","sibling","current","Vb","Xb","Yb","unstable_scheduleCallback","Zb","unstable_cancelCallback","$b","unstable_shouldYield","ac","unstable_requestPaint","D","unstable_now","bc","unstable_getCurrentPriorityLevel","cc","unstable_ImmediatePriority","dc","unstable_UserBlockingPriority","ec","unstable_NormalPriority","fc","unstable_LowPriority","gc","unstable_IdlePriority","hc","ic","lc","Math","clz32","mc","nc","log","LN2","oc","pc","qc","rc","pendingLanes","suspendedLanes","pingedLanes","entangledLanes","entanglements","sc","uc","vc","wc","eventTimes","yc","E","zc","Ac","Bc","Cc","Dc","Ec","Fc","Gc","Hc","Ic","Jc","Kc","Map","Lc","Mc","Nc","Oc","delete","pointerId","Pc","nativeEvent","blockedOn","domEventName","eventSystemFlags","targetContainers","Rc","Sc","priority","isDehydrated","containerInfo","Tc","Uc","dispatchEvent","shift","Vc","Wc","Xc","Yc","Zc","ReactCurrentBatchConfig","$c","transition","ad","bd","cd","dd","Qc","stopPropagation","ed","fd","gd","hd","id","jd","keyCode","charCode","kd","ld","md","_reactName","_targetInst","currentTarget","isDefaultPrevented","defaultPrevented","returnValue","isPropagationStopped","preventDefault","cancelBubble","persist","isPersistent","rd","sd","td","nd","eventPhase","bubbles","cancelable","timeStamp","Date","now","isTrusted","od","pd","view","detail","qd","vd","screenX","screenY","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","ud","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","wd","yd","dataTransfer","Ad","Cd","animationName","elapsedTime","pseudoElement","Dd","clipboardData","Ed","Gd","data","Hd","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Id","Jd","Alt","Control","Meta","Shift","Kd","Ld","key","String","fromCharCode","code","location","repeat","locale","which","Md","Od","width","height","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","Qd","touches","targetTouches","changedTouches","Sd","Td","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","Ud","Vd","Wd","Xd","documentMode","Yd","Zd","$d","ae","be","ce","de","ge","color","date","datetime","email","month","number","password","range","search","tel","text","time","url","week","he","ie","je","event","listeners","ke","le","me","ne","oe","pe","qe","re","se","te","ue","oninput","ve","detachEvent","we","xe","attachEvent","ye","ze","Ae","Ce","De","Ee","Fe","node","offset","nextSibling","Ge","contains","compareDocumentPosition","He","HTMLIFrameElement","contentWindow","href","Ie","contentEditable","Je","focusedElem","selectionRange","documentElement","start","end","selectionStart","selectionEnd","min","defaultView","getSelection","extend","rangeCount","anchorNode","anchorOffset","focusNode","focusOffset","createRange","setStart","removeAllRanges","addRange","setEnd","element","left","scrollLeft","top","scrollTop","focus","Ke","Le","Me","Ne","Oe","Pe","Qe","Re","animationend","animationiteration","animationstart","transitionend","Se","Te","Ue","animation","Ve","We","Xe","Ye","Ze","$e","af","bf","cf","ff","gf","concat","hf","Rb","instance","listener","F","jf","has","kf","lf","mf","random","nf","bind","capture","passive","n","v","C","t","x","r","B","of","pf","parentWindow","qf","rf","O","T","za","L","ee","char","fe","unshift","sf","tf","uf","vf","wf","xf","yf","__html","zf","setTimeout","Af","clearTimeout","Bf","Promise","Df","queueMicrotask","resolve","then","catch","Cf","Ef","Ff","Gf","previousSibling","Hf","If","Jf","Kf","Lf","Mf","Nf","Of","G","H","Pf","I","Qf","Rf","Sf","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Tf","childContextTypes","Uf","Vf","Wf","getChildContext","Xf","__reactInternalMemoizedMergedChildContext","Yf","Zf","$f","ag","bg","dg","eg","fg","defaultProps","gg","hg","ig","jg","kg","lg","_currentValue","mg","childLanes","ng","dependencies","firstContext","lanes","og","pg","context","memoizedValue","next","qg","rg","sg","updateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","pending","interleaved","effects","tg","ug","eventTime","lane","payload","callback","vg","J","mode","K","wg","xg","yg","w","u","y","zg","Ag","Bg","Component","refs","Cg","Fg","isMounted","_reactInternals","enqueueSetState","M","Dg","Eg","enqueueReplaceState","enqueueForceUpdate","Gg","shouldComponentUpdate","isPureReactComponent","Hg","contextType","state","updater","Ig","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","Jg","props","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","Kg","Lg","Mg","Ng","Og","Pg","Qg","Rg","Sg","Tg","Ug","Vg","Wg","Xg","Yg","N","Zg","$g","ah","elementType","deletions","bh","pendingProps","overflow","treeContext","retryLane","ch","dh","eh","fh","memoizedProps","gh","hh","ih","ref","_owner","_stringRef","jh","join","kh","lh","index","mh","nh","oh","implementation","ph","qh","done","rh","sh","th","uh","vh","wh","xh","yh","tagName","zh","Ah","Bh","P","Ch","revealOrder","Dh","Eh","_workInProgressVersionPrimary","Fh","ReactCurrentDispatcher","Gh","Hh","Q","R","S","Ih","Jh","Kh","Lh","U","Mh","Nh","Oh","Ph","Qh","Rh","Sh","Th","baseQueue","queue","Uh","Vh","Wh","lastRenderedReducer","action","hasEagerState","eagerState","lastRenderedState","dispatch","Xh","Yh","Zh","$h","ai","getSnapshot","bi","ci","di","lastEffect","stores","ei","fi","gi","create","destroy","deps","hi","ii","ji","ki","li","mi","ni","oi","pi","qi","ri","si","ti","ui","vi","wi","xi","yi","readContext","useCallback","useContext","useEffect","useImperativeHandle","useInsertionEffect","useLayoutEffect","useMemo","useReducer","useRef","useState","useDebugValue","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","identifierPrefix","zi","message","Ai","console","error","Li","Ni","Oi","Bi","WeakMap","Ci","Di","Ei","Fi","getDerivedStateFromError","componentDidCatch","Gi","componentStack","Hi","pingCache","Ii","Ji","Ki","Pi","tailMode","tail","V","subtreeFlags","Qi","pendingContext","Ri","wasMultiple","multiple","onClick","onclick","size","createElementNS","autoFocus","createTextNode","W","Si","rendering","Ti","renderingStartTime","isBackwards","last","Ui","Vi","Wi","ReactCurrentOwner","Xi","Yi","Zi","$i","aj","compare","bj","cj","dj","baseLanes","cachePool","ej","fj","gj","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","hj","ij","jj","kj","lj","mj","fallback","nj","oj","pj","qj","_reactRetry","rj","sj","tj","uj","vj","xj","yj","zj","Aj","WeakSet","X","Bj","Cj","Dj","Ej","Gj","Hj","Ij","Jj","onCommitFiberUnmount","componentWillUnmount","Kj","Lj","Mj","Nj","Oj","Pj","Qj","insertBefore","_reactRootContainer","Rj","Sj","Tj","Xj","Yj","Zj","ak","__reactInternalSnapshotBeforeUpdate","src","Wj","Lk","bk","ceil","ck","dk","ek","Y","Z","fk","gk","hk","ik","jk","Vj","Infinity","kk","lk","mk","nk","ok","pk","qk","rk","sk","tk","callbackNode","expirationTimes","expiredLanes","tc","callbackPriority","cg","uk","vk","wk","xk","yk","zk","Ak","Bk","Ck","Dk","Ek","finishedWork","finishedLanes","Fk","timeoutHandle","Gk","Hk","Ik","Jk","Kk","mutableReadLanes","xc","Fj","display","Uj","onCommitFiberRoot","jc","onRecoverableError","Mk","onPostCommitFiberRoot","Nk","Ok","Qk","isReactComponent","pendingChildren","Rk","mutableSourceEagerHydrationData","Sk","cache","transitions","Tk","Uk","Vk","Wk","Xk","Yk","Zk","wj","Pk","al","reportError","bl","_internalRoot","cl","dl","el","fl","hl","gl","unmount","unstable_scheduleHydration","splice","querySelectorAll","JSON","stringify","form","il","usingClientEntryPoint","Events","jl","findFiberByHostInstance","bundleType","version","rendererPackageName","kl","rendererConfig","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","setErrorHandler","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","__REACT_DEVTOOLS_GLOBAL_HOOK__","ll","isDisabled","supportsFiber","inject","createPortal","createRoot","unstable_strictMode","findDOMNode","flushSync","hydrate","hydrateRoot","hydratedSources","_getVersion","_source","unmountComponentAtNode","unstable_batchedUpdates","unstable_renderSubtreeIntoContainer","checkDCE","err","__self","__source","Fragment","jsx","jsxs","setState","forceUpdate","escape","_status","_result","default","Children","map","count","toArray","only","Profiler","PureComponent","StrictMode","Suspense","cloneElement","createContext","_currentValue2","_threadCount","Provider","Consumer","_defaultValue","_globalName","createFactory","createRef","forwardRef","isValidElement","lazy","memo","startTransition","unstable_act","runtime","undefined","Op","hasOwn","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","writable","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","Context","_invoke","GenStateSuspendedStart","method","arg","GenStateExecuting","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","GenStateSuspendedYield","makeInvokeMethod","fn","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","AsyncIterator","PromiseImpl","invoke","reject","result","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","TypeError","info","resultName","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","i","isGeneratorFunction","genFun","ctor","mark","setPrototypeOf","__proto__","awrap","async","iter","object","reverse","pop","skipTempReset","prev","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","globalThis","Function","sortIndex","performance","setImmediate","startTime","expirationTime","priorityLevel","navigator","scheduling","isInputPending","MessageChannel","port2","port1","onmessage","postMessage","unstable_Profiling","unstable_continueExecution","unstable_forceFrameRate","floor","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_runWithPriority","delay","unstable_wrapCallback","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","getter","__esModule","definition","o","prop","_arrayLikeToArray","arr","len","arr2","_unsupportedIterableToArray","minLen","from","_i","_s","_e","_arr","_n","_d","NavigationContext","React","LocationContext","RouteContext","outlet","matches","invariant","cond","matchRoutes","routes","locationArg","basename","pathname","stripBasename","parsePath","branches","flattenRoutes","sort","score","siblings","every","compareIndexes","routesMeta","childrenIndex","rankRouteBranches","matchRouteBranch","parentsMeta","parentPath","route","relativePath","path","caseSensitive","startsWith","joinPaths","computeScore","paramRe","isSplat","s","segments","initialScore","some","filter","reduce","segment","branch","matchedParams","matchedPathname","remainingPathname","matchPath","params","pathnameBase","normalizePathname","pattern","paramNames","regexpSource","_","paramName","endsWith","RegExp","compilePath","matcher","captureGroups","splatValue","decodeURIComponent","safelyDecodeURIComponent","resolveTo","toArg","routePathnames","locationPathname","to","toPathname","routePathnameIndex","toSegments","fromPathname","hash","resolvePathname","normalizeSearch","normalizeHash","resolvePath","nextChar","paths","useHref","useInRouterContext","useResolvedPath","joinedPathname","getToPathname","endsWithSlash","createHref","useLocation","useNavigate","routePathnamesJson","activeRef","parse","go","OutletContext","useParams","routeMatch","_renderMatches","parentMatches","reduceRight","React.createElement","Navigate","navigate","Outlet","useOutlet","Route","_props","Router","basenameProp","locationProp","navigationType","NavigationType","static","staticProp","navigationContext","trailingPathname","Routes","parentParams","parentPathnameBase","locationFromContext","parsedLocationArg","_parsedLocationArg$pa","useRoutes","createRoutesFromChildren","HashRouter","historyRef","createHashHistory","history","listen","Link","reloadDocument","rest","internalOnClick","replaceProp","isModifiedEvent","createPath","useLinkClickHandler","NavLink","ariaCurrentProp","className","classNameProp","styleProp","isActive","ariaCurrent","Boolean","useSearchParams","defaultInit","defaultSearchParamsRef","createSearchParams","searchParams","allowArrayLike","it","normalCompletion","didErr","step","_e2","getAll","append","nextInit","navigateOptions","init","URLSearchParams","Footer","rel","navBarLinks","icon","xmlns","viewBox","fill","LogoutIcon","enableBackground","NavBar","accessToken","removeAccessToken","fetch","headers","Authorization","res","Header","alt","Home","LoadingAnimation","BackwardArrowIcon","ForwardArrowIcon","points","NextPreviousArrows","Number","isLast","RecipeTags","tags","CheckRecipe","recipe","setRecipe","setIsLast","json","contributor_username","vegetarian","prep_time","quantity","unit","difficulty","description","recipe_tags","recipe_ingredients","ing","english_name","hindi_name_devnagari","hindi_name_latin","recipe_steps","NewRecipe","htmlFor","placeholder","required","RecipeCard","setTags","RecipeCards","recipes","BrowseRecipes","setRecipes","user","User","setUser","username","bio","Profile","setAccessToken","access_token","_defineProperty","ownKeys","enumerableOnly","getOwnPropertySymbols","symbols","sym","_objectSpread2","getOwnPropertyDescriptors","defineProperties","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","Login","userData","setUserData","onChange","alert","fetchData","Signup","setUsername","setPassword","setName","setBio","redirectToLogin","setRedirectToLogin","rows","cols","sendData","App","userToken","localStorage","getItem","getToken","token","setToken","setItem","removeItem","useAccessToken","ReactDOM","getElementById"],"sourceRoot":""}